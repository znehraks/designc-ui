# .github/workflows/release.yml
name: Release

on:
  # master로의 직접 push와 PR merge 모두 감지
  push:
    branches:
      - master
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  release:
    # PR의 경우 머지된 경우만 실행, push의 경우 항상 실행
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest

      # 커밋 메시지 분석해서 버전 결정
      - name: Determine Version
        id: version
        run: |
          # PR merge인 경우와 직접 push인 경우 커밋 범위를 다르게 가져오기
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            COMMITS=$(git log ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} --pretty=format:"%s")
          else
            # 마지막 태그(또는 없으면 처음 커밋)부터 현재까지의 커밋
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s")
          fi

          echo "Analyzing commits:"
          echo "$COMMITS"

          # 버전 변경 타입 결정
          if echo "$COMMITS" | grep -q "^BREAKING CHANGE:\|!:"; then
            echo "VERSION_TYPE=major" >> $GITHUB_OUTPUT
            echo "Found BREAKING CHANGE - incrementing major version"
          elif echo "$COMMITS" | grep -q "^feat:\|^feature:"; then
            echo "VERSION_TYPE=minor" >> $GITHUB_OUTPUT
            echo "Found feature - incrementing minor version"
          elif echo "$COMMITS" | grep -q "^fix:\|^bugfix:"; then
            echo "VERSION_TYPE=patch" >> $GITHUB_OUTPUT
            echo "Found fix - incrementing patch version"
          else
            echo "VERSION_TYPE=patch" >> $GITHUB_OUTPUT
            echo "No specific version increment found - defaulting to patch"
          fi

          # 현재 버전 가져오기
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # 새 버전 계산
          NEW_VERSION=$(node -e "
            const [major, minor, patch] = '${CURRENT_VERSION}'.split('.');
            const type = '${VERSION_TYPE}';
            let newVersion;
            switch(type) {
              case 'major':
                newVersion = \`\${Number(major) + 1}.0.0\`;
                break;
              case 'minor':
                newVersion = \`\${major}.\${Number(minor) + 1}.0\`;
                break;
              case 'patch':
                newVersion = \`\${major}.\${minor}.\${Number(patch) + 1}\`;
                break;
            }
            console.log(newVersion);
          ")

          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      # package.json 버전 업데이트
      - name: Update Version
        run: |
          npm version ${{ steps.version.outputs.NEW_VERSION }} --no-git-tag-version
          echo "Updated package.json to version ${{ steps.version.outputs.NEW_VERSION }}"

      # 의존성 설치 및 빌드
      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      # npm 배포
      - name: Publish to NPM
        run: pnpm publish --no-git-tag-version
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # GitHub 릴리스 생성
      - name: Create GitHub Release
        run: |
          # 변경사항 목록 생성
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGELOG=$(git log ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} --pretty=format:"* %s")
          else
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
            CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"* %s")
          fi

          echo "Changes in this release:"
          echo "$CHANGELOG"

          # 태그 생성 및 푸시
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v${{ steps.version.outputs.NEW_VERSION }} -m "Release v${{ steps.version.outputs.NEW_VERSION }}"
          git push origin v${{ steps.version.outputs.NEW_VERSION }}

          # GitHub 릴리스 생성
          gh release create v${{ steps.version.outputs.NEW_VERSION }} \
            --title "Release v${{ steps.version.outputs.NEW_VERSION }}" \
            --notes "$CHANGELOG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
