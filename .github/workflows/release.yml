name: Release

on:
  push:
    branches:
      - master
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  release:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Determine Version
        id: version
        run: |
          # PR merge인 경우와 직접 push인 경우 커밋 범위를 다르게 가져오기
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            COMMITS=$(git log ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} --pretty=format:"%s")
          else
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s")
          fi

          echo "Analyzing commits:"
          echo "$COMMITS"

          # 버전 타입 설정
          VERSION_TYPE="patch"  # 기본값 설정
          if echo "$COMMITS" | grep -q "^BREAKING CHANGE:\|!:"; then
            VERSION_TYPE="major"
          elif echo "$COMMITS" | grep -q "^feat:\|^feature:"; then
            VERSION_TYPE="minor"
          elif echo "$COMMITS" | grep -q "^fix:\|^bugfix:"; then
            VERSION_TYPE="patch"
          fi
          
          # 현재 버전 확인
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Could not determine current version"
            exit 1
          fi
          
          # 새 버전 계산
          IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
          MAJOR="${version_parts[0]}"
          MINOR="${version_parts[1]}"
          PATCH="${version_parts[2]}"
          
          case $VERSION_TYPE in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
          esac
          
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Determined new version: $NEW_VERSION"

      - name: Update Version
        run: |
          if [ -z "${{ steps.version.outputs.new_version }}" ]; then
            echo "Error: New version is undefined"
            exit 1
          fi
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          echo "Updated package.json to version ${{ steps.version.outputs.new_version }}"

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Publish to NPM
        run: pnpm publish --no-git-tag-version
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGELOG=$(git log ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} --pretty=format:"* %s")
          else
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
            CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"* %s")
          fi

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v${{ steps.version.outputs.new_version }} -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin v${{ steps.version.outputs.new_version }}

          gh release create v${{ steps.version.outputs.new_version }} \
            --title "Release v${{ steps.version.outputs.new_version }}" \
            --notes "$CHANGELOG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}